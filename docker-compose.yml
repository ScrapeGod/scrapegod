# version: '3.9'
version: "3.6"
services:
  postgres:
    image: "postgres:12.1"
    env_file:
      - ".env"
    environment:
      - POSTGRES_IDLE_IN_TRANSACTION_SESSION_TIMEOUT=${IDLE_IN_TRANSACTION_SESSION_TIMEOUT:-10000}
    ports:
      - "5432:5432" # removed 127.0.0.1: - adding firewalls in iptables

    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - esnet
    command: >
      postgres 
      -c 'idle_in_transaction_session_timeout=${IDLE_IN_TRANSACTION_SESSION_TIMEOUT:-120000}'
    logging:
      options:
        max-size: 100m
    profiles: ["dev", "prod"]

  redis:
    image: redis:6.2.3-alpine
    command: redis-server --appendonly yes --requirepass splendidponchodesire
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    # stop_grace_period: "${DOCKER_STOP_GRACE_PERIOD:-3s}"
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis:/var/lib/redis/data
      - ./redis-volume:/data
    networks:
      - esnet
    profiles: ["dev", "prod"]

  scrapegod:
    build:
      context: "."
      args:
        - "FLASK_ENV=${FLASK_ENV:-production}"
    command:
      ["gunicorn", "-c", "python:config.gunicorn", "scrapegod.app:create_app()"]
    depends_on:
      - "postgres"
      - "redis"
    env_file:
      - ".env"
    ports:
      - "${DOCKER_WEB_PORT:-127.0.0.1:8000}:8000"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes:
      - .:/app
    tty: true
    networks:
      - esnet
    logging:
      options:
        max-size: 100m
    profiles: ["dev", "prod"]

  celery:
    build:
      context: "."
      args:
        - "FLASK_ENV=${FLASK_ENV:-production}"

    # command: celery worker -B -l info -A scrapegod.blueprints.contact.tasks
    # command: celery worker -A "scrapegod.app.celery_app" worker -B -l "${CELERY_LOG_LEVEL:-info}"
    # NOTE: concurrency should be increased once we run celery on a server with > 4-5 CPUs
    command: celery -A "scrapegod.app.celery_app" worker -B -l "${CELERY_LOG_LEVEL:-info}" --concurrency 5
    env_file:
      - ".env"
    depends_on:
      - "postgres"
      - "redis"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    # stop_grace_period: "${DOCKER_STOP_GRACE_PERIOD:-3s}"
    volumes:
      - .:/app
    networks:
      - "esnet"
    logging:
      options:
        max-size: 50m
    profiles: ["dev", "prod"]

volumes:
  postgres: {}
  redis: {}
  esdata:
    driver: local

networks:
  esnet:
